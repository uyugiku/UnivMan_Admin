// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.univman.studentm;

import com.univman.studentm.Studentm;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Studentm_Roo_Jpa_ActiveRecord {

	public static final String where = " where o.finished = false";

    @PersistenceContext
    transient EntityManager Studentm.entityManager;

    public static final List<String> Studentm.fieldNames4OrderClauseFilter = java.util.Arrays.asList("name", "mail", "finished");

    public static final EntityManager Studentm.entityManager() {
        EntityManager em = new Studentm().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long Studentm.countStudentms() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Studentm o"+where, Long.class).getSingleResult();
    }

    public static List<Studentm> Studentm.findAllStudentms() {
        return entityManager().createQuery("SELECT o FROM Studentm o"+where, Studentm.class).getResultList();
    }

    public static List<Studentm> Studentm.findAllStudentms(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Studentm o"+where;
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Studentm.class).getResultList();
    }

    public static Studentm Studentm.findStudentm(Long id) {
        if (id == null) return null;
        return entityManager().find(Studentm.class, id);
    }

    public static List<Studentm> Studentm.findStudentmEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Studentm o"+where, Studentm.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    public static List<Studentm> Studentm.findStudentmEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Studentm o"+where;
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Studentm.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    @Transactional
    public void Studentm.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void Studentm.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Studentm attached = Studentm.findStudentm(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void Studentm.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void Studentm.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public Studentm Studentm.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Studentm merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

}
